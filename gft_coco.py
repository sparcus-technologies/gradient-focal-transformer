# -*- coding: utf-8 -*-
"""GFT_COCO.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_Oi4XUqsLJT6FTextlEyP03jO07bXyZ4
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.utils.data import DataLoader, Dataset
from torchvision import datasets, transforms
from torchvision.transforms import InterpolationMode
import numpy as np
from timm import create_model
from timm.models.vision_transformer import Block
from sklearn.metrics import precision_recall_fscore_support, accuracy_score
from tqdm import tqdm
import os

# Keep the original model architecture unchanged
class HierarchicalAttention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, attn_drop=0., proj_drop=0.):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = head_dim ** -0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

        # Smoothing conv layer
        self.smooth = nn.Conv1d(1, 1, kernel_size=3, padding=1, bias=False)
        nn.init.ones_(self.smooth.weight)

        self.ema_alpha = 0.9
        self.register_buffer('ema_grad', None)

    def compute_gradient_attention(self, attn_scores, window_size):
        B, H, N, _ = attn_scores.shape

        # Compute mean attention across heads
        mean_attn = attn_scores.mean(dim=-1)  # [B, H, N]

        # Compute gradients using finite differences
        grad = torch.zeros_like(mean_attn)
        grad[:, :, 1:-1] = (mean_attn[:, :, 2:] - mean_attn[:, :, :-2]) / 2.0
        grad[:, :, 0] = mean_attn[:, :, 1] - mean_attn[:, :, 0]
        grad[:, :, -1] = mean_attn[:, :, -1] - mean_attn[:, :, -2]

        # Take absolute value and average across heads
        importance_scores = grad.abs().mean(dim=1)  # [B, N]

        # Apply spatial smoothing
        importance_scores = self.smooth(importance_scores.unsqueeze(1)).squeeze(1)

        # Normalize scores
        importance_scores = (importance_scores - importance_scores.mean(dim=-1, keepdim=True)) / \
                          (importance_scores.std(dim=-1, keepdim=True) + 1e-6)

        # Update EMA during training
        if self.training:
            if self.ema_grad is None or self.ema_grad.shape != importance_scores.shape:
                self.ema_grad = importance_scores.detach()
            else:
                self.ema_grad = self.ema_alpha * self.ema_grad + \
                               (1 - self.ema_alpha) * importance_scores.detach()
            importance_scores = 0.5 * (importance_scores + self.ema_grad)

        # Final softmax with temperature scaling
        importance_scores = F.softmax(importance_scores / 0.1, dim=-1)

        return importance_scores

    def forward(self, x, window_size):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn_raw = attn.clone()
        attn = attn.softmax(dim=-1)

        # Compute gradient-based importance
        window_importance = self.compute_gradient_attention(attn_raw, window_size)

        attn = self.attn_drop(attn)
        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)

        return x, window_importance

class GFT(nn.Module):
    def __init__(self, base_model='vit_base_patch16_224', num_classes=80, patch_size=16):
        super().__init__()
        self.base_model = create_model(base_model, pretrained=True)

        # Calculate exact number of patches
        self.num_patches = (224 // patch_size) ** 2  # This is 196 for 224/16
        self.patch_size = patch_size
        self.num_classes = num_classes

        # Hierarchical attention blocks
        self.hierarchical_blocks = nn.ModuleList([
            HierarchicalAttention(dim=768, num_heads=12)
            for _ in range(3)
        ])

        self.classifier = nn.Linear(768, num_classes)

        # Define progressive patch selection sizes
        self.selection_sizes = [
          int(self.num_patches * 0.75),  # Keep 75% patches
          int(self.num_patches * 0.5),   # Keep 50% patches
          int(self.num_patches * 0.25),  # Keep 25% patches
        ]

    def select_patches(self, tokens, importance, k):
        B = tokens.size(0)
        N = importance.size(1)

        # Ensure k is not larger than the available patches
        k = min(k, N)

        # Get top-k indices
        _, top_k_idx = torch.topk(importance, k, dim=1)
        batch_idx = torch.arange(B, device=tokens.device).unsqueeze(1).expand(-1, k)

        # Select the top-k patches
        return tokens[batch_idx, top_k_idx]

    def forward(self, x):
        # Initial patch embeddings
        x = self.base_model.patch_embed(x)
        cls_token = self.base_model.cls_token.expand(x.shape[0], -1, -1)
        x = torch.cat((cls_token, x), dim=1)
        x = self.base_model.pos_drop(x + self.base_model.pos_embed)

        # Apply base transformer blocks
        for blk in self.base_model.blocks[:8]:
            x = blk(x)

        patch_tokens = x[:, 1:]  # Remove CLS token
        current_tokens = patch_tokens

        # Hierarchical attention refinement
        for i, (attn_block, select_size) in enumerate(zip(self.hierarchical_blocks, self.selection_sizes)):
            # Apply attention and get importance scores
            tokens_attn, importance = attn_block(current_tokens, window_size=14)  # Use constant window size

            # Select patches based on gradient importance
            current_tokens = self.select_patches(tokens_attn, importance, select_size)

        # Final classification
        x = torch.cat((x[:, 0].unsqueeze(1), current_tokens), dim=1)
        x = x[:, 0]  # Use CLS token
        x = self.classifier(x)

        return x

# Custom COCO Classification Dataset
class CocoClassification(Dataset):
    def __init__(self, root, annFile, transform=None):
        self.dataset = datasets.CocoDetection(root=root, annFile=annFile)
        self.transform = transform

        # Get categories from COCO dataset
        self.categories = self.dataset.coco.loadCats(self.dataset.coco.getCatIds())
        self.cat_ids = [cat['id'] for cat in self.categories]
        self.cat_id_to_label = {cat_id: i for i, cat_id in enumerate(self.cat_ids)}
        self.classes = [cat['name'] for cat in self.categories]

        # Filter images to only include those with annotations
        self.valid_ids = []
        for idx in range(len(self.dataset)):
            img, anns = self.dataset[idx]
            if len(anns) > 0:
                self.valid_ids.append(idx)

        print(f"Found {len(self.valid_ids)} images with annotations out of {len(self.dataset)} total images")

    def __getitem__(self, idx):
        # Get the image and annotations from the filtered indices
        real_idx = self.valid_ids[idx]
        img, anns = self.dataset[real_idx]

        # Get the primary category (use the first annotation's category)
        cat_id = anns[0]['category_id']
        label = self.cat_id_to_label[cat_id]

        # Apply transform if specified
        if self.transform is not None:
            img = self.transform(img)

        return img, label

    def __len__(self):
        return len(self.valid_ids)

# Training setup
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

# Data transforms
train_transform = transforms.Compose([
    transforms.Resize((224, 224), interpolation=InterpolationMode.BICUBIC),
    transforms.RandomHorizontalFlip(),
    transforms.RandomAutocontrast(),
    transforms.RandAugment(num_ops=2, magnitude=9),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

test_transform = transforms.Compose([
    transforms.Resize((224, 224), interpolation=InterpolationMode.BICUBIC),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

# Download COCO dataset if not present
print("Setting up COCO dataset...")
os.makedirs('./data/coco', exist_ok=True)

# Automatically download COCO dataset if not present
if not os.path.exists('./data/coco/annotations/instances_train2017.json'):
    print("Downloading COCO annotations...")
    !wget http://images.cocodataset.org/annotations/annotations_trainval2017.zip -P ./data/coco/
    !unzip -q ./data/coco/annotations_trainval2017.zip -d ./data/coco/

if not os.path.exists('./data/coco/train2017'):
    print("Downloading COCO train2017 images...")
    !wget http://images.cocodataset.org/zips/train2017.zip -P ./data/coco/
    !unzip -q ./data/coco/train2017.zip -d ./data/coco/

if not os.path.exists('./data/coco/val2017'):
    print("Downloading COCO val2017 images...")
    !wget http://images.cocodataset.org/zips/val2017.zip -P ./data/coco/
    !unzip -q ./data/coco/val2017.zip -d ./data/coco/

# COCO dataset paths
train_img_dir = './data/coco/train2017'
val_img_dir = './data/coco/val2017'
train_ann_file = './data/coco/annotations/instances_train2017.json'
val_ann_file = './data/coco/annotations/instances_val2017.json'

# Load COCO datasets
print("Loading COCO datasets...")
train_dataset = CocoClassification(root=train_img_dir, annFile=train_ann_file, transform=train_transform)
val_dataset = CocoClassification(root=val_img_dir, annFile=val_ann_file, transform=test_transform)

num_classes = len(train_dataset.classes)
print(f"Number of COCO classes: {num_classes}")

batch_size = 16  # Same batch size as in the original code
train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, num_workers=4)
val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False, num_workers=4)

# Model initialization with COCO number of classes (80 classes)
model = GFT(num_classes=80)
num_params = sum(p.numel() for p in model.parameters() if p.requires_grad)
print(f'Number of parameters: {num_params}')
model = model.to(device)

# Training parameters
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.AdamW(model.parameters(), lr=1e-5, weight_decay=0.05)
scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=20)  # Changed to match 20 epochs

def train_epoch(model, loader, criterion, optimizer):
    model.train()
    total_loss = 0
    correct = 0
    total = 0

    for images, targets in tqdm(loader, desc="Training"):
        images, targets = images.to(device), targets.to(device)

        optimizer.zero_grad()
        outputs = model(images)
        loss = criterion(outputs, targets)

        loss.backward()
        optimizer.step()

        total_loss += loss.item()
        _, predicted = outputs.max(1)
        total += targets.size(0)
        correct += predicted.eq(targets).sum().item()

    return total_loss / len(loader), 100. * correct / total

def evaluate(model, loader):
    model.eval()
    all_preds = []
    all_targets = []

    with torch.no_grad():
        for images, targets in tqdm(loader, desc="Evaluating"):
            images = images.to(device)
            outputs = model(images)
            _, predicted = outputs.max(1)

            all_preds.extend(predicted.cpu().numpy())
            all_targets.extend(targets.cpu().numpy())

    all_preds = np.array(all_preds)
    all_targets = np.array(all_targets)

    accuracy = accuracy_score(all_targets, all_preds)
    precision, recall, f1, _ = precision_recall_fscore_support(all_targets, all_preds, average='weighted')

    return accuracy, precision, recall, f1

# Training loop
num_epochs = 20
best_val_acc = 0

for epoch in range(num_epochs):
    train_loss, train_acc = train_epoch(model, train_loader, criterion, optimizer)
    val_acc, val_precision, val_recall, val_f1 = evaluate(model, val_loader)

    scheduler.step()

    print(f"Epoch {epoch+1}/{num_epochs}")
    print(f"Train Loss: {train_loss:.4f}, Train Acc: {train_acc:.2f}%")
    print(f"Val Acc: {val_acc*100:.2f}%, Precision: {val_precision:.4f}, Recall: {val_recall:.4f}, F1: {val_f1:.4f}")

    if val_acc > best_val_acc:
        best_val_acc = val_acc
        torch.save(model.state_dict(), 'best_gft_coco.pth')

# Final evaluation
model.load_state_dict(torch.load('best_gft_coco.pth'))
test_acc, test_precision, test_recall, test_f1 = evaluate(model, val_loader)

print("\nTest Set Results:")
print(f"Accuracy: {test_acc*100:.2f}%")
print(f"Precision: {test_precision:.4f}")
print(f"Recall: {test_recall:.4f}")
print(f"F1-score: {test_f1:.4f}")

